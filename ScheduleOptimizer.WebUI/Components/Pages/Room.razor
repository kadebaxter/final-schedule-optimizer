@page "/room"
@using ScheduleOptimizer.Logic
<PageTitle>Room Management</PageTitle>

<h1>Room Management</h1>

<!-- Input Fields for Room Details -->
<div style="margin-bottom: 20px;">
    <input type="text" @bind="roomNumberString" placeholder="Room Number" class="form-control" style="display: inline-block; width: 200px; margin-right: 10px;" />
    <input type="text" @bind="roomType" placeholder="Room Type ()" class="form-control" style="display: inline-block; width: 300px; margin-right: 10px;" />
    @* <select @bind="isAvailable" class="form-control" style="display: inline-block; width: 150px;">
        <option value="true">Available</option>
        <option value="false">Occupied</option>
    </select> *@
</div>

<!-- Action Buttons -->
<div style="margin-bottom: 20px;">
    <button style="background-color: #008000" class="btn btn-primary" @onclick="AddRoom">Add Room</button>
    <button style="background-color: #FF0000" class="btn btn-primary" @onclick="RemoveRoom">Remove Room</button>
    @* <button class="btn btn-danger" @onclick="ClearRooms">Clear Rooms</button> *@
</div>

<!-- Rooms Table -->
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Room Number</th>
            <th>Room Type</th>
            <th>Availability</th>
        </tr>
    </thead>
    <tbody>
        @if (InitializeData.ListOfRooms.Count == 0)
        {
            <tr>
                <td colspan="3" class="text-center">No rooms available. Add a room to see it here.</td>
            </tr>
        }
        else
        {
            @foreach (var room in InitializeData.ListOfRooms)
            {
                <tr>
                    <td>@room.RoomNumber</td>
                    <td>@room.RoomType</td>
                    <td>@(room.IsAvailable ? "Available" : "Occupied")</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private string roomNumberString = string.Empty;
    private string roomType = string.Empty;
    private bool isAvailable = true;

    private void AddRoom()
    {
        if (!string.IsNullOrWhiteSpace(roomNumberString) && !string.IsNullOrWhiteSpace(roomType))
        {
            int roomNum = int.Parse(roomNumberString);
            Logic.Room newRoom = new Logic.Room
                (
                    roomNum,
                    InitializeData.ParseRoomType(roomType.ToLower())
                );

            if (!InitializeData.ListOfRooms.Any(r => r.RoomNumber == roomNum))
            {
                InitializeData.ListOfRooms.Add(newRoom);
            }

            ResetFields();
        }
    }

    private void RemoveRoom()
    {
        if (!string.IsNullOrWhiteSpace(roomNumberString))
        {
            int roomNum = int.Parse(roomNumberString);
            var roomToRemove = InitializeData.ListOfRooms.FirstOrDefault(r => r.RoomNumber == roomNum);
            if (roomToRemove != null)
            {
                InitializeData.ListOfRooms.Remove(roomToRemove);
            }
        }

        ResetFields();
    }

    private void ClearRooms()
    {
        InitializeData.ListOfRooms.Clear();
    }

    private void ResetFields()
    {
        roomNumberString = string.Empty;
        roomType = string.Empty;
        isAvailable = true;
    }
}